{
  "service": {
    "service": "backend-demo",
    "serviceObject": {
      "name": "backend-demo"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "lambdaHashingVersion": "20201221",
      "stage": "stage",
      "region": "us-east-2",
      "resources": {
        "Resources": {
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-AllowOrigin": "'*'",
                "gatewayresponse.header.Access-Control-AllowHeaders": "'*'"
              }
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-AllowOrigin": "'*'",
                "gatewayresponse.header.Access-Control-AllowHeaders": "'*'"
              }
            },
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:*:*"
        }
      ],
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "versionFunctions": true,
      "environment": {
        "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
        "AWS_DYNAMODB_URL": "http://localhost:8500",
        "AWS_DYNAMODB_REGION": "localhost",
        "AWS_DYNAMODB_TABLE": "demo"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "IndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-index"
            }
          },
          "GetUsersAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-getUsersAll"
            }
          },
          "PostUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-postUser"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-getUser"
            }
          },
          "UpdateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-updateUser"
            }
          },
          "DeleteUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-deleteUser"
            }
          },
          "GetApiStartWardsPersonsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/backend-demo-stage-getApiStartWardsPersons"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "backend-demo",
                        "stage",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-demo-stage*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/backend-demo-stage*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "backend-demo",
                    "stage",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "IndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/index.zip"
              },
              "Handler": "handler.index",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-index",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IndexLogGroup"
            ]
          },
          "GetUsersAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/getUsersAll.zip"
              },
              "Handler": "handlers/users.getUsersAll",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-getUsersAll",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Mostrar todos los usuarios de dynamodb.",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersAllLogGroup"
            ]
          },
          "PostUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/postUser.zip"
              },
              "Handler": "handlers/users.postUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-postUser",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Registrar Usuario en DynamoDb",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostUserLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/getUser.zip"
              },
              "Handler": "handlers/users.getUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-getUser",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Mostrar un usuario de dynamodb.",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "UpdateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/updateUser.zip"
              },
              "Handler": "handlers/users.updateUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-updateUser",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Modificar datos un usuario de dynamodb.",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserLogGroup"
            ]
          },
          "DeleteUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/deleteUser.zip"
              },
              "Handler": "handlers/users.deleteUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-deleteUser",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Eliminar un usuario de dynamodb.",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteUserLogGroup"
            ]
          },
          "GetApiStartWardsPersonsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z/getApiStartWardsPersons.zip"
              },
              "Handler": "handlers/startwards.getStartWardsPersons",
              "Runtime": "nodejs12.x",
              "FunctionName": "backend-demo-stage-getApiStartWardsPersons",
              "MemorySize": 128,
              "Timeout": 12,
              "Description": "Obtener Informacion de Api de StartWards y traducir a español los Keys",
              "Environment": {
                "Variables": {
                  "API_STARTWARDS_BASE_URL": "http://swapi.py4e.com",
                  "AWS_DYNAMODB_URL": "http://localhost:8500",
                  "AWS_DYNAMODB_REGION": "localhost",
                  "AWS_DYNAMODB_TABLE": "demo"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetApiStartWardsPersonsLogGroup"
            ]
          },
          "IndexLambdaVersionvagy2vTD6DfWArqxBAY9IBnHQpxyaZY4yXC5AEICE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IndexLambdaFunction"
              },
              "CodeSha256": "TEFCIXtXDuKEKkHYi5IIYbrOSQlVltmCW2SKD5mKeFQ="
            }
          },
          "GetApiStartWardsPersonsLambdaVersionj1oYJMvsdR7Hc6H7aRCBvzlOM1yJriaktowW5xz1PI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetApiStartWardsPersonsLambdaFunction"
              },
              "CodeSha256": "DV6kT6R66cSjR6WyiTGSWcNNNZi+M74cijGSHZmu9ys=",
              "Description": "Obtener Informacion de Api de StartWards y traducir a español los Keys"
            }
          },
          "PostUserLambdaVersionhDWI9xMh4VXymocBASRcSOEwA2lWU3A1o05czwhas": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostUserLambdaFunction"
              },
              "CodeSha256": "wY+CfkTg7zO5YHki/Jxf6YYc+1kM7Hv31wbQPXWpQgg=",
              "Description": "Registrar Usuario en DynamoDb"
            }
          },
          "GetUserLambdaVersionEek1kaFJjtabhwLp59rPBp8hRrdHlFY1hpfHcPNf8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "ZepY7JO9CMbfJA7D3kLZ548ABWEMkmLGcSmhrjQtYCI=",
              "Description": "Mostrar un usuario de dynamodb."
            }
          },
          "UpdateUserLambdaVersionLhlCwALUgVIbM3F9Ws1v3trWhAYKaDOuFreDxGkVs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserLambdaFunction"
              },
              "CodeSha256": "ZepY7JO9CMbfJA7D3kLZ548ABWEMkmLGcSmhrjQtYCI=",
              "Description": "Modificar datos un usuario de dynamodb."
            }
          },
          "DeleteUserLambdaVersionBhwQq9ilRq2v272uNlefP2V7fqy75iSMRvkDvQcHnQ4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteUserLambdaFunction"
              },
              "CodeSha256": "ZepY7JO9CMbfJA7D3kLZ548ABWEMkmLGcSmhrjQtYCI=",
              "Description": "Eliminar un usuario de dynamodb."
            }
          },
          "GetUsersAllLambdaVersionFED7TAxeYqqc0URGFZfKX6He5wyOvNvSIdYh2aw50": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersAllLambdaFunction"
              },
              "CodeSha256": "ZepY7JO9CMbfJA7D3kLZ548ABWEMkmLGcSmhrjQtYCI=",
              "Description": "Mostrar todos los usuarios de dynamodb."
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "stage-backend-demo",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEndpoint": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "endpoint",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpoint"
              },
              "PathPart": "v1",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1Users": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpointV1"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1UsersUseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpointV1Users"
              },
              "PathPart": "{user_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1Startwards": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpointV1"
              },
              "PathPart": "startwards",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1StartwardsPersons": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpointV1Startwards"
              },
              "PathPart": "persons",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEndpointV1StartwardsPersonsPersonidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEndpointV1StartwardsPersons"
              },
              "PathPart": "{person_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1UsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1Users"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersAllLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1UsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1Users"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PostUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1UsersUseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1UsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1UsersUseridVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1UsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1UsersUseridVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1UsersUseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodEndpointV1StartwardsPersonsPersonidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEndpointV1StartwardsPersonsPersonidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetApiStartWardsPersonsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1619967263171": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "stage"
            },
            "DependsOn": [
              "ApiGatewayMethodGet",
              "ApiGatewayMethodEndpointV1UsersGet",
              "ApiGatewayMethodEndpointV1UsersPost",
              "ApiGatewayMethodEndpointV1UsersUseridVarGet",
              "ApiGatewayMethodEndpointV1UsersUseridVarPut",
              "ApiGatewayMethodEndpointV1UsersUseridVarDelete",
              "ApiGatewayMethodEndpointV1StartwardsPersonsPersonidVarGet"
            ]
          },
          "IndexLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUsersAllLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetApiStartWardsPersonsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetApiStartWardsPersonsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-ServerlessDeploymentBucketName"
            }
          },
          "IndexLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IndexLambdaVersionvagy2vTD6DfWArqxBAY9IBnHQpxyaZY4yXC5AEICE"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-IndexLambdaFunctionQualifiedArn"
            }
          },
          "GetApiStartWardsPersonsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetApiStartWardsPersonsLambdaVersionj1oYJMvsdR7Hc6H7aRCBvzlOM1yJriaktowW5xz1PI"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-GetApiStartWardsPersonsLambdaFunctionQualifiedArn"
            }
          },
          "PostUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostUserLambdaVersionhDWI9xMh4VXymocBASRcSOEwA2lWU3A1o05czwhas"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-PostUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionEek1kaFJjtabhwLp59rPBp8hRrdHlFY1hpfHcPNf8"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserLambdaVersionLhlCwALUgVIbM3F9Ws1v3trWhAYKaDOuFreDxGkVs"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-UpdateUserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteUserLambdaVersionBhwQq9ilRq2v272uNlefP2V7fqy75iSMRvkDvQcHnQ4"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-DeleteUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersAllLambdaVersionFED7TAxeYqqc0URGFZfKX6He5wyOvNvSIdYh2aw50"
            },
            "Export": {
              "Name": "sls-backend-demo-stage-GetUsersAllLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/stage"
                ]
              ]
            },
            "Export": {
              "Name": "sls-backend-demo-stage-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3300,
        "lambdaPort": 3302
      },
      "webpack": {
        "includeModules": false
      }
    },
    "plugins": [
      "serverless-dynamodb-local",
      "serverless-offline",
      "serverless-dotenv-plugin",
      "serverless-webpack"
    ],
    "pluginsData": {},
    "functions": {
      "index": {
        "handler": "handler.index",
        "events": [
          {
            "http": {
              "path": "",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-index",
        "package": {
          "artifact": ".serverless\\index.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "IndexLambdaVersionvagy2vTD6DfWArqxBAY9IBnHQpxyaZY4yXC5AEICE"
      },
      "getUsersAll": {
        "handler": "handlers/users.getUsersAll",
        "memorySize": 128,
        "timeout": 12,
        "description": "Mostrar todos los usuarios de dynamodb.",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/users",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-getUsersAll",
        "package": {
          "artifact": ".serverless\\getUsersAll.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUsersAllLambdaVersionFED7TAxeYqqc0URGFZfKX6He5wyOvNvSIdYh2aw50"
      },
      "postUser": {
        "handler": "handlers/users.postUser",
        "memorySize": 128,
        "timeout": 12,
        "description": "Registrar Usuario en DynamoDb",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/users",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-postUser",
        "package": {
          "artifact": ".serverless\\postUser.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PostUserLambdaVersionhDWI9xMh4VXymocBASRcSOEwA2lWU3A1o05czwhas"
      },
      "getUser": {
        "handler": "handlers/users.getUser",
        "memorySize": 128,
        "timeout": 12,
        "description": "Mostrar un usuario de dynamodb.",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/users/{user_id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-getUser",
        "package": {
          "artifact": ".serverless\\getUser.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionEek1kaFJjtabhwLp59rPBp8hRrdHlFY1hpfHcPNf8"
      },
      "updateUser": {
        "handler": "handlers/users.updateUser",
        "memorySize": 128,
        "timeout": 12,
        "description": "Modificar datos un usuario de dynamodb.",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/users/{user_id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-updateUser",
        "package": {
          "artifact": ".serverless\\updateUser.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserLambdaVersionLhlCwALUgVIbM3F9Ws1v3trWhAYKaDOuFreDxGkVs"
      },
      "deleteUser": {
        "handler": "handlers/users.deleteUser",
        "memorySize": 128,
        "timeout": 12,
        "description": "Eliminar un usuario de dynamodb.",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/users/{user_id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-deleteUser",
        "package": {
          "artifact": ".serverless\\deleteUser.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteUserLambdaVersionBhwQq9ilRq2v272uNlefP2V7fqy75iSMRvkDvQcHnQ4"
      },
      "getApiStartWardsPersons": {
        "handler": "handlers/startwards.getStartWardsPersons",
        "memorySize": 128,
        "timeout": 12,
        "description": "Obtener Informacion de Api de StartWards y traducir a español los Keys",
        "events": [
          {
            "http": {
              "path": "endpoint/v1/startwards/persons/{person_id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "backend-demo-stage-getApiStartWardsPersons",
        "package": {
          "artifact": ".serverless\\getApiStartWardsPersons.zip"
        },
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetApiStartWardsPersonsLambdaVersionj1oYJMvsdR7Hc6H7aRCBvzlOM1yJriaktowW5xz1PI"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "package": {
        "individually": true,
        "artifactDirectoryName": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/backend-demo/stage/1619967293572-2021-05-02T14:54:53.572Z",
    "artifact": ""
  }
}